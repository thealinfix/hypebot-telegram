# –í —Ñ—É–Ω–∫—Ü–∏–∏ on_callback –¥–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è regen_thought_photo:

        elif data == "regen_thought_photo":
            # –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ñ–æ—Ç–æ
            thought_data = state.get("current_thought")
            if thought_data and thought_data.get("custom_photo"):
                await query.edit_message_caption("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç...")
                
                new_thought = await gen_caption(
                    thought_data["topic"], 
                    "", 
                    "sneakers", 
                    is_thought=True
                )
                hashtags = get_hashtags(thought_data["topic"], "sneakers")
                final_text = f"{new_thought}\n\n{hashtags}"
                
                thought_data["text"] = final_text
                state["current_thought"] = thought_data
                save_state()
                
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish_thought")],
                    [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="regen_thought_photo")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_thought")]
                ])
                
                await query.edit_message_caption(
                    caption=f"üí≠ <b>–ü–æ—Å—Ç-—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ —Å –≤–∞—à–∏–º —Ñ–æ—Ç–æ:</b>\n\n{final_text}",
                    parse_mode=ParseMode.HTML,
                    reply_markup=keyboard
                )
            return
