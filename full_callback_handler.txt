@app.on_callback_query()
async def callback_handler(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
   """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
   try:
       data = query.data
       
       # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
       if data.startswith("cmd_"):
           command = data.replace("cmd_", "")
           
           if command == "help":
               await help_command(query, context)
           elif command == "preview":
               await preview_command(query, context)
           elif command == "check":
               await check_releases_command(query, context)
           elif command == "thoughts":
               await thoughts_menu(query, context)
           elif command == "scheduled":
               await scheduled_command(query, context)
           return
       
       # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º—ã—Å–ª–µ–π
       elif data == "create_thought":
           # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º—ã—Å–ª–∏
           keyboard = InlineKeyboardMarkup([
               [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_thought")]
           ])
           await query.edit_message_text(
               "üí≠ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è:",
               reply_markup=keyboard
           )
           state["waiting_for_thought_topic"] = True
           return
           
       elif data == "generate_thought":
           # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—ã—Å–ª–∏ –ø–æ —Ç–µ–º–µ
           topic = state.get("thought_topic")
           if not topic:
               await query.answer("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
               return
               
           await query.edit_message_text("ü§î –ì–µ–Ω–µ—Ä–∏—Ä—É—é –º—ã—Å–ª—å...")
           
           try:
               # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –º—ã—Å–ª–∏
               thought_text = await generate_thought(topic)
               
               if thought_text:
                   keyboard = InlineKeyboardMarkup([
                       [InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_thought")],
                       [InlineKeyboardButton("üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±–ª–æ–∂–∫—É", callback_data="gen_thought_cover")],
                       [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_thought")]
                   ])
                   
                   state["current_thought"] = {
                       "topic": topic,
                       "text": thought_text
                   }
                   save_state()
                   
                   await query.edit_message_text(
                       f"üí≠ <b>–¢–µ–º–∞:</b> {topic}\n\n"
                       f"<b>–¢–µ–∫—Å—Ç:</b>\n{thought_text}",
                       reply_markup=keyboard,
                       parse_mode="HTML"
                   )
               else:
                   await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º—ã—Å–ª—å")
                   
           except Exception as e:
               logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—ã—Å–ª–∏: {e}")
               await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
           return
           
       elif data == "edit_thought":
           # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º—ã—Å–ª–∏
           thought_data = state.get("current_thought")
           if not thought_data:
               await query.answer("‚ùå –î–∞–Ω–Ω—ã–µ –º—ã—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
               return
               
           keyboard = InlineKeyboardMarkup([
               [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
           ])
           
           await query.edit_message_text(
               f"üìù –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n\n{thought_data['text']}\n\n"
               "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –º—ã—Å–ª–∏:",
               reply_markup=keyboard
           )
           state["editing_thought"] = True
           return
           
       elif data == "cancel_thought":
           # –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º—ã—Å–ª–∏
           await query.message.delete()
           state.pop("current_thought", None)
           state.pop("thought_topic", None)
           state.pop("waiting_for_thought_topic", None)
           state.pop("editing_thought", None)
           save_state()
           return

       elif data == "gen_thought_cover":
           # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–ª–æ–∂–∫–∏ –¥–ª—è –º—ã—Å–ª–∏
           thought_data = state.get("current_thought")
           
           # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
           if not thought_data:
               await query.answer("‚ùå –î–∞–Ω–Ω—ã–µ –º—ã—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
               return
           
           # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–º—ã
           if "topic" not in thought_data:
               await query.answer("‚ùå –¢–µ–º–∞ –º—ã—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
               return
           
           # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
           await query.edit_message_text("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–±–ª–æ–∂–∫—É –¥–ª—è –º—ã—Å–ª–∏...")
           
           try:
               # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç–∏–ª—è
               style_config = IMAGE_STYLES["thoughts"]
               
               # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
               prompt = style_config["prompt_template"].format(topic=thought_data["topic"])
               
               # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
               image_url = await generate_image(prompt, style_config["style"])
               
               if image_url:
                   # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                   thought_data["image_url"] = image_url
                   state["current_thought"] = thought_data
                   save_state()
                   
                   # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                   keyboard = InlineKeyboardMarkup([
                       [InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –º—ã—Å–ª—å", callback_data="publish_thought")],
                       [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="gen_thought_cover")],
                       [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="create_thought")]
                   ])
                   
                   # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
                   await query.message.reply_photo(
                       photo=image_url,
                       caption=f"üé® –û–±–ª–æ–∂–∫–∞ –¥–ª—è –º—ã—Å–ª–∏ –≥–æ—Ç–æ–≤–∞!\n\n"
                               f"üí≠ *–¢–µ–º–∞:* {thought_data['topic']}\n"
                               f"üìù *–¢–µ–∫—Å—Ç:* {thought_data['text'][:100]}...",
                       reply_markup=keyboard,
                       parse_mode="Markdown"
                   )
                   
                   # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                   await query.message.delete()
                   
               else:
                   # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
                   await query.edit_message_text(
                       "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±–ª–æ–∂–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                       reply_markup=InlineKeyboardMarkup([
                           [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="gen_thought_cover")],
                           [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="create_thought")]
                       ])
                   )
                   
           except Exception as e:
               # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
               logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–ª–æ–∂–∫–∏ –¥–ª—è –º—ã—Å–ª–∏: {e}")
               
               # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
               await query.edit_message_text(
                   "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–ª–æ–∂–∫–∏.",
                   reply_markup=InlineKeyboardMarkup([
                       [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="create_thought")]
                   ])
               )
           return

       elif data == "publish_thought":
           # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –º—ã—Å–ª–∏
           thought_data = state.get("current_thought")
           
           if not thought_data:
               await query.answer("‚ùå –î–∞–Ω–Ω—ã–µ –º—ã—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
               return
           
           try:
               # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
               if thought_data.get("image_url"):
                   # –° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                   await context.bot.send_photo(
                       chat_id=CHANNEL_USERNAME,
                       photo=thought_data["image_url"],
                       caption=f"üí≠ *{thought_data['topic']}*\n\n{thought_data['text']}\n\n#thoughts #hype",
                       parse_mode="Markdown"
                   )
               else:
                   # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                   await context.bot.send_message(
                       chat_id=CHANNEL_USERNAME,
                       text=f"üí≠ *{thought_data['topic']}*\n\n{thought_data['text']}\n\n#thoughts #hype",
                       parse_mode="Markdown"
                   )
               
               # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
               state.pop("current_thought", None)
               save_state()
               
               # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
               await query.edit_message_text("‚úÖ –ú—ã—Å–ª—å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
               
           except Exception as e:
               logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º—ã—Å–ª–∏: {e}")
               await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
           return

       elif data == "noop":
           # –ü—É—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
           return
           
       # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
       if ":" not in data:
           await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
           return
           
       action, uid = data.split(":", 1)
       
       if action not in ["approve", "reject", "regen"]:
           await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
           return
           
       record = state["pending"].get(uid)
       if not record:
           await query.edit_message_text("‚ùå –≠—Ç–æ—Ç –ø–æ—Å—Ç —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
           return
           
       if action == "approve":
           published = await publish_release(context.bot, record)
           if published:
               await query.edit_message_text(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {record['title'][:50]}...")
               state["pending"].pop(uid, None)
               state["generated_images"].pop(uid, None)
               save_state()
           else:
               await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {record['title'][:50]}...")
               
       elif action == "reject":
           await query.edit_message_text(f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {record['title'][:50]}...")
           state["pending"].pop(uid, None)
           state["generated_images"].pop(uid, None)
           save_state()
           
       elif action == "regen":
           await query.edit_message_text("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
           try:
               new_image_url = await generate_image(
                   IMAGE_STYLES[record["style"]]["prompt_template"].format(
                       title=record["title"],
                       brand=record.get("brand", "")
                   ),
                   IMAGE_STYLES[record["style"]]["style"]
               )
               
               if new_image_url:
                   state["generated_images"][uid] = new_image_url
                   save_state()
                   
                   keyboard = InlineKeyboardMarkup([
                       [InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"approve:{uid}")],
                       [InlineKeyboardButton("üé® –ù–æ–≤–∞—è –æ–±–ª–æ–∂–∫–∞", callback_data=f"regen:{uid}")],
                       [InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"reject:{uid}")]
                   ])
                   
                   await query.message.reply_photo(
                       photo=new_image_url,
                       caption=f"üîÑ –ù–æ–≤–∞—è –æ–±–ª–æ–∂–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                               f"üì∞ *{record['title']}*\n"
                               f"üîó [–ò—Å—Ç–æ—á–Ω–∏–∫]({record['link']})",
                       reply_markup=keyboard,
                       parse_mode="Markdown"
                   )
                   await query.message.delete()
               else:
                   await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                   
           except Exception as e:
               logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
               await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
               
   except Exception as e:
       logger.error(f"–û—à–∏–±–∫–∞ –≤ callback_handler: {e}")
       await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
